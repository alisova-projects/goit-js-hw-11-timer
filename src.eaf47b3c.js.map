{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","intervalId","document","querySelector","init","time","getTimeComponents","updateClockFace","setInterval","currentTime","Date","now","deltaTime","days","hours","mins","secs","textContent","pad","Math","floor","value","String","padStart","timer","window","onload","start"],"mappings":";;;AA8DA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA9DA,QAAA,yBAGMA,IAAAA,EAAAA,WACkC,SAAA,EAAA,GAAtBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAY,EAAA,KAAA,GAC3BC,KAAAA,WAAa,KACbF,KAAAA,SAAWG,SAASC,cAAiBJ,GAAAA,OAAAA,IACrCC,KAAAA,WAAaA,EAEbI,KAAAA,OAqDb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAjDW,MAAA,WACGC,IAAAA,EAAO,KAAKC,kBAAkB,GAC/BC,KAAAA,gBAAgBF,KA+C7B,CAAA,IAAA,QA3CY,MAAA,WAAA,IAAA,EAAA,KACCJ,KAAAA,WAAaO,YAAY,WACpBC,IAAAA,EAAcC,KAAKC,MACnBC,EAAY,EAAKZ,WAAaS,EAE9BJ,EAAO,EAAKC,kBAAkBM,GACpC,EAAKL,gBAAgBF,IACtB,OAoCX,CAAA,IAAA,kBAhCiD,MAAA,SAAA,GAA3BQ,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC5BjB,KAAAA,SAASI,cAAc,uBAAuBc,YAAcJ,EAC5Dd,KAAAA,SAASI,cAAc,wBAAwBc,YAAcH,EAC7Df,KAAAA,SAASI,cAAc,uBAAuBc,YAAcF,EAC5DhB,KAAAA,SAASI,cAAc,uBAAuBc,YAAcD,IA4BzE,CAAA,IAAA,oBAxBsBX,MAAAA,SAAAA,GAQP,MAAA,CAAEQ,KAPI,KAAKK,IAAIC,KAAKC,MAAMf,EAAQ,QAO1BS,MAND,KAAKI,IACnBC,KAAKC,MAAOf,EAAQ,MAAyB,OAKvBU,KAHT,KAAKG,IAAIC,KAAKC,MAAOf,EAAQ,KAAoB,MAGlCW,KAFf,KAAKE,IAAIC,KAAKC,MAAOf,EAAQ,IAAc,SAkBhE,CAAA,IAAA,MAZQgB,MAAAA,SAAAA,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,SAWzC,EA3DMzB,GAqDA0B,EAAQ,IAAI1B,EAAe,CAC/BC,SAAU,WACVC,WAAY,IAAIU,KAAK,2BAIvBe,OAAOC,OAASF,EAAMG","file":"src.eaf47b3c.js","sourceRoot":"..\\src","sourcesContent":["import '../src/css/common.css';\n\n// создаём класс\nclass CountdownTimer{\n    constructor({ selector, targetDate}){\n        this.intervalId = null;\n        this.selector = document.querySelector(`${selector}`);\n        this.targetDate = targetDate;\n\n        this.init();\n    }\n\n// очищаем интерфейс до формата 00:00:00\n    init() {\n        const time = this.getTimeComponents(0);\n        this.updateClockFace(time);\n    }\n\n// таймер\n    start() {\n        this.intervalId = setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = this.targetDate - currentTime;\n            \n            const time = this.getTimeComponents(deltaTime);\n            this.updateClockFace(time);\n        }, 1000);\n    }\n\n// обновляем интерфейс\n    updateClockFace({ days, hours, mins, secs }) {\n        this.selector.querySelector('[data-value=\"days\"]').textContent = days;\n        this.selector.querySelector('[data-value=\"hours\"]').textContent = hours;\n        this.selector.querySelector('[data-value=\"mins\"]').textContent = mins;\n        this.selector.querySelector('[data-value=\"secs\"]').textContent = secs;\n    }\n\n// принимает время в мс, вычисляет наеобходимые величины времени\n    getTimeComponents(time) {\n        const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n        const hours = this.pad(\n        Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n        );\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n        return { days, hours, mins, secs };\n    }\n    \n// принимает число, приводит к строке и добавляет в начало 0 если число меньше 2-х знаков\n    pad(value) {\n        return String(value).padStart(2, '0');\n    }\n}\n\n// создаём экземпляр\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Feb 28, 2021 23:59:59'),\n});\n\n// запускаем при загрузке страницы\nwindow.onload = timer.start();"]}